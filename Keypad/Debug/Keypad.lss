
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2d  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000618  00000000  00000000  000011cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082c  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <IsPressed_pin>:
	}
}

int IsPressed_pin(uint8_t port,uint8_t pin){
	
	switch (port)
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	99 f0       	breq	.+38     	; 0xa6 <IsPressed_pin+0x2a>
  80:	18 f4       	brcc	.+6      	; 0x88 <IsPressed_pin+0xc>
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	31 f0       	breq	.+12     	; 0x92 <IsPressed_pin+0x16>
  86:	2d c0       	rjmp	.+90     	; 0xe2 <IsPressed_pin+0x66>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	b9 f0       	breq	.+46     	; 0xba <IsPressed_pin+0x3e>
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	f9 f0       	breq	.+62     	; 0xce <IsPressed_pin+0x52>
  90:	28 c0       	rjmp	.+80     	; 0xe2 <IsPressed_pin+0x66>
	{
		case 1: if(PINA & (1<<pin)) {return 1;}
  92:	89 b3       	in	r24, 0x19	; 25
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <IsPressed_pin+0x20>
  98:	95 95       	asr	r25
  9a:	87 95       	ror	r24
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <IsPressed_pin+0x1c>
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	99 27       	eor	r25, r25
  a4:	08 95       	ret
		else { return 0; } break;
		
		case 2: if(PINB & (1<<pin)) {return 1;}
  a6:	86 b3       	in	r24, 0x16	; 22

int IsPressed_pin(uint8_t port,uint8_t pin){
	
	switch (port)
	{
		case 1: if(PINA & (1<<pin)) {return 1;}
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <IsPressed_pin+0x34>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <IsPressed_pin+0x30>
  b4:	81 70       	andi	r24, 0x01	; 1
  b6:	99 27       	eor	r25, r25
  b8:	08 95       	ret
		else { return 0; } break;
		
		case 2: if(PINB & (1<<pin)) {return 1;}
		else { return 0; } break;
		
		case 3: if(PINC & (1<<pin)) {return 1;}
  ba:	83 b3       	in	r24, 0x13	; 19

int IsPressed_pin(uint8_t port,uint8_t pin){
	
	switch (port)
	{
		case 1: if(PINA & (1<<pin)) {return 1;}
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <IsPressed_pin+0x48>
  c0:	95 95       	asr	r25
  c2:	87 95       	ror	r24
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <IsPressed_pin+0x44>
  c8:	81 70       	andi	r24, 0x01	; 1
  ca:	99 27       	eor	r25, r25
  cc:	08 95       	ret
		else { return 0; } break;
		
		case 3: if(PINC & (1<<pin)) {return 1;}
		else { return 0; } break;
			
		case 4: if(PIND & (1<<pin)) {return 1;}
  ce:	80 b3       	in	r24, 0x10	; 16

int IsPressed_pin(uint8_t port,uint8_t pin){
	
	switch (port)
	{
		case 1: if(PINA & (1<<pin)) {return 1;}
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <IsPressed_pin+0x5c>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <IsPressed_pin+0x58>
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	99 27       	eor	r25, r25
  e0:	08 95       	ret
		else { return 0; } break;
			
		case 4: if(PIND & (1<<pin)) {return 1;}
		else { return 0; } break;
			
		default: return 0; break;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  e6:	08 95       	ret

000000e8 <Keypad>:

int Keypad()
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
  ec:	90 9a       	sbi	0x12, 0	; 18
  ee:	91 9a       	sbi	0x12, 1	; 18
  f0:	92 9a       	sbi	0x12, 2	; 18
{
	Set_pin(portD,0);
	Set_pin(portD,1);
	Set_pin(portD,2);
	
	if (IsPressed_pin(portD,3))
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
  fa:	89 2b       	or	r24, r25
  fc:	01 f1       	breq	.+64     	; 0x13e <Keypad+0x56>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
  fe:	90 98       	cbi	0x12, 0	; 18
 100:	91 98       	cbi	0x12, 1	; 18
	if (IsPressed_pin(portD,3))
	{
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,3)) 
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 10a:	89 2b       	or	r24, r25
 10c:	09 f0       	breq	.+2      	; 0x110 <Keypad+0x28>
 10e:	6a c0       	rjmp	.+212    	; 0x1e4 <Keypad+0xfc>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 110:	90 98       	cbi	0x12, 0	; 18
 112:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 114:	91 9a       	sbi	0x12, 1	; 18
		else {
			Reset_pin(portD,0);
			Reset_pin(portD,2);
			Set_pin(portD,1);
			
			if (IsPressed_pin(portD,3)) {
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 11e:	89 2b       	or	r24, r25
 120:	09 f0       	breq	.+2      	; 0x124 <Keypad+0x3c>
 122:	63 c0       	rjmp	.+198    	; 0x1ea <Keypad+0x102>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 124:	91 98       	cbi	0x12, 1	; 18
 126:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 128:	90 9a       	sbi	0x12, 0	; 18
			{
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,3)) {
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 132:	89 2b       	or	r24, r25
 134:	09 f0       	breq	.+2      	; 0x138 <Keypad+0x50>
 136:	5c c0       	rjmp	.+184    	; 0x1f0 <Keypad+0x108>
	{
		return 0;
		_delay_ms(20);
	}
			
		return 50;
 138:	c2 e3       	ldi	r28, 0x32	; 50
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	6d c0       	rjmp	.+218    	; 0x218 <Keypad+0x130>
					_delay_ms(20);
				}
			}
		}
	}
	else if (IsPressed_pin(portD,4)){
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 146:	89 2b       	or	r24, r25
 148:	01 f1       	breq	.+64     	; 0x18a <Keypad+0xa2>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 14a:	90 98       	cbi	0x12, 0	; 18
 14c:	91 98       	cbi	0x12, 1	; 18
	}
	else if (IsPressed_pin(portD,4)){
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,4)) 
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 156:	89 2b       	or	r24, r25
 158:	09 f0       	breq	.+2      	; 0x15c <Keypad+0x74>
 15a:	4d c0       	rjmp	.+154    	; 0x1f6 <Keypad+0x10e>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 15c:	90 98       	cbi	0x12, 0	; 18
 15e:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 160:	91 9a       	sbi	0x12, 1	; 18
		else {
			Reset_pin(portD,0);
			Reset_pin(portD,2);
			Set_pin(portD,1);
			
			if (IsPressed_pin(portD,4)) 
 162:	64 e0       	ldi	r22, 0x04	; 4
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 16a:	89 2b       	or	r24, r25
 16c:	09 f0       	breq	.+2      	; 0x170 <Keypad+0x88>
 16e:	46 c0       	rjmp	.+140    	; 0x1fc <Keypad+0x114>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 170:	91 98       	cbi	0x12, 1	; 18
 172:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 174:	90 9a       	sbi	0x12, 0	; 18
			{
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,4)) {
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 17e:	89 2b       	or	r24, r25
 180:	09 f0       	breq	.+2      	; 0x184 <Keypad+0x9c>
 182:	3f c0       	rjmp	.+126    	; 0x202 <Keypad+0x11a>
	{
		return 0;
		_delay_ms(20);
	}
			
		return 50;
 184:	c2 e3       	ldi	r28, 0x32	; 50
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	47 c0       	rjmp	.+142    	; 0x218 <Keypad+0x130>
				}
			}
		}
	}
	
	else if (IsPressed_pin(portD,5))
 18a:	65 e0       	ldi	r22, 0x05	; 5
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 192:	ec 01       	movw	r28, r24
 194:	89 2b       	or	r24, r25
 196:	e9 f0       	breq	.+58     	; 0x1d2 <Keypad+0xea>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 198:	90 98       	cbi	0x12, 0	; 18
 19a:	91 98       	cbi	0x12, 1	; 18
	else if (IsPressed_pin(portD,5))
	{
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,5)) {
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 1a4:	89 2b       	or	r24, r25
 1a6:	81 f5       	brne	.+96     	; 0x208 <Keypad+0x120>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 1a8:	90 98       	cbi	0x12, 0	; 18
 1aa:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 1ac:	91 9a       	sbi	0x12, 1	; 18
		}
		else {
			Reset_pin(portD,0);
			Reset_pin(portD,2);
			Set_pin(portD,1);
			if (IsPressed_pin(portD,5)) {
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 1b6:	89 2b       	or	r24, r25
 1b8:	51 f5       	brne	.+84     	; 0x20e <Keypad+0x126>
	switch (port)
	{
		case 1: PORTA &= ~(1<<pin); break;
		case 2: PORTB &= ~(1<<pin); break;
		case 3: PORTC &= ~(1<<pin); break;
		case 4: PORTD &= ~(1<<pin); break;
 1ba:	91 98       	cbi	0x12, 1	; 18
 1bc:	92 98       	cbi	0x12, 2	; 18
	switch (port)
	{
		case 1: PORTA |= (1<<pin); break;
		case 2: PORTB |= (1<<pin); break;
		case 3: PORTC |= (1<<pin); break;
		case 4: PORTD |= (1<<pin); break;
 1be:	90 9a       	sbi	0x12, 0	; 18
			{ 
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,5)) {
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 1c8:	89 2b       	or	r24, r25
 1ca:	21 f5       	brne	.+72     	; 0x214 <Keypad+0x12c>
	{
		return 0;
		_delay_ms(20);
	}
			
		return 50;
 1cc:	c2 e3       	ldi	r28, 0x32	; 50
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <Keypad+0x130>
				}
			}
		}
	}
	
	else if (IsPressed_pin(portD,6))
 1d2:	66 e0       	ldi	r22, 0x06	; 6
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	0e 94 3e 00 	call	0x7c	; 0x7c <IsPressed_pin>
 1da:	89 2b       	or	r24, r25
 1dc:	e9 f4       	brne	.+58     	; 0x218 <Keypad+0x130>
	{
		return 0;
		_delay_ms(20);
	}
			
		return 50;
 1de:	c2 e3       	ldi	r28, 0x32	; 50
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	1a c0       	rjmp	.+52     	; 0x218 <Keypad+0x130>
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,3)) 
		{
			return 1;
 1e4:	c1 e0       	ldi	r28, 0x01	; 1
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <Keypad+0x130>
			Reset_pin(portD,0);
			Reset_pin(portD,2);
			Set_pin(portD,1);
			
			if (IsPressed_pin(portD,3)) {
				return 2;
 1ea:	c2 e0       	ldi	r28, 0x02	; 2
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <Keypad+0x130>
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,3)) {
					return 3;
 1f0:	c3 e0       	ldi	r28, 0x03	; 3
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <Keypad+0x130>
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,4)) 
		{
			return 4;
 1f6:	c4 e0       	ldi	r28, 0x04	; 4
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	0e c0       	rjmp	.+28     	; 0x218 <Keypad+0x130>
			Reset_pin(portD,2);
			Set_pin(portD,1);
			
			if (IsPressed_pin(portD,4)) 
			{
				return 5;
 1fc:	c5 e0       	ldi	r28, 0x05	; 5
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	0b c0       	rjmp	.+22     	; 0x218 <Keypad+0x130>
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,4)) {
					return 6;
 202:	c6 e0       	ldi	r28, 0x06	; 6
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	08 c0       	rjmp	.+16     	; 0x218 <Keypad+0x130>
	{
		Reset_pin(portD,0);
		Reset_pin(portD,1);
		
		if (IsPressed_pin(portD,5)) {
			return 7;
 208:	c7 e0       	ldi	r28, 0x07	; 7
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	05 c0       	rjmp	.+10     	; 0x218 <Keypad+0x130>
		else {
			Reset_pin(portD,0);
			Reset_pin(portD,2);
			Set_pin(portD,1);
			if (IsPressed_pin(portD,5)) {
				return 8;
 20e:	c8 e0       	ldi	r28, 0x08	; 8
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <Keypad+0x130>
				Reset_pin(portD,1);
				Reset_pin(portD,2);
				Set_pin(portD,0);
				
				if (IsPressed_pin(portD,5)) {
					return 9;
 214:	c9 e0       	ldi	r28, 0x09	; 9
 216:	d0 e0       	ldi	r29, 0x00	; 0
		return 0;
		_delay_ms(20);
	}
			
		return 50;
}
 218:	ce 01       	movw	r24, r28
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <init_Keypad>:
	switch (port)
	{
		case 1: DDRA |= (1<<pin); break;
		case 2: DDRB |= (1<<pin); break;
		case 3: DDRC |= (1<<pin); break;
		case 4: DDRD |= (1<<pin); break;
 220:	88 9a       	sbi	0x11, 0	; 17
 222:	89 9a       	sbi	0x11, 1	; 17
 224:	8a 9a       	sbi	0x11, 2	; 17
	switch (port)
	{
		case 1: DDRA &= ~(1<<pin); break;
		case 2: DDRB &= ~(1<<pin); break;
		case 3: DDRC &= ~(1<<pin); break;
		case 4: DDRD &= ~(1<<pin); break;
 226:	8b 98       	cbi	0x11, 3	; 17
 228:	8c 98       	cbi	0x11, 4	; 17
 22a:	8d 98       	cbi	0x11, 5	; 17
 22c:	8e 98       	cbi	0x11, 6	; 17
 22e:	08 95       	ret

00000230 <init_display>:

void Make_pin_output(uint8_t port,uint8_t pin){
	
	switch (port)
	{
		case 1: DDRA |= (1<<pin); break;
 230:	d0 9a       	sbi	0x1a, 0	; 26
 232:	d1 9a       	sbi	0x1a, 1	; 26
 234:	d2 9a       	sbi	0x1a, 2	; 26
 236:	d3 9a       	sbi	0x1a, 3	; 26
 238:	08 95       	ret

0000023a <main>:
int num;

int main(void)
{
    /* Replace with your application code */
	init_Keypad();
 23a:	0e 94 10 01 	call	0x220	; 0x220 <init_Keypad>
	init_display();
 23e:	0e 94 18 01 	call	0x230	; 0x230 <init_display>
	
	while (1) 
    {	
		num = Keypad();
 242:	0e 94 74 00 	call	0xe8	; 0xe8 <Keypad>
 246:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		PORTA = num == 50 ? PORTA: num;	
 24e:	82 33       	cpi	r24, 0x32	; 50
 250:	91 05       	cpc	r25, r1
 252:	09 f4       	brne	.+2      	; 0x256 <main+0x1c>
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	8b bb       	out	0x1b, r24	; 27
    }
 258:	f4 cf       	rjmp	.-24     	; 0x242 <main+0x8>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
